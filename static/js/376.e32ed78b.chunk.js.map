{"version":3,"file":"static/js/376.e32ed78b.chunk.js","mappings":"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","sources":["components/TicTacToe/Board/Board.styled.jsx","components/TicTacToe/Board/Board.jsx","components/TicTacToe/TicTacToe.styled.jsx","components/TicTacToe/TicTacToe.jsx","pages/TicTacToePage/TicTacToePage.styled.jsx","pages/TicTacToePage/TicTacToePage.jsx"],"sourcesContent":["import styled from \"styled-components\";\r\n\r\nexport const BoardContainer = styled.div`\r\n  display: flex;\r\n  flex-wrap: nowrap;\r\n  flex-direction: column;\r\n  align-items: center;\r\n\r\n  margin-top: 12px;\r\n  /* transition: transform 3s ease-in-out; */\r\n`;\r\n\r\nexport const Row = styled.div`\r\n  display: flex;\r\n  flex-wrap: nowrap;\r\n`;\r\n\r\nexport const SquareBtn = styled.button`\r\n  float: left;\r\n\r\n  width: 100px;\r\n  height: 100px;\r\n\r\n  margin-top: -1px;\r\n  margin-left: -1px;\r\n  padding: 0;\r\n\r\n  border: 2px solid rgb(170, 200, 85);\r\n\r\n  background-color: ${(p) => p.theme.colors.bgcPrimary};\r\n\r\n  /* background-color: transparent; */\r\n\r\n  text-align: center;\r\n  font-size: 40px;\r\n  cursor: pointer;\r\n\r\n  color: rgb(200, 200, 60);\r\n`;\r\n","import { BoardContainer, Row, SquareBtn } from \"./Board.styled\";\r\n\r\nexport const Board = ({ board, handleClick, isXTurn, isAgainstComputer }) => {\r\n  return (\r\n    <BoardContainer>\r\n      {[0, 1, 2].map((rowIndex) => (\r\n        <Row key={rowIndex}>\r\n          {[0, 1, 2].map((colIndex) => {\r\n            const index = rowIndex * 3 + colIndex;\r\n            return (\r\n              <SquareBtn\r\n                key={index}\r\n                onClick={() => handleClick(index)}\r\n                // Disable when it's not the player's turn or the square is already filled\r\n                disabled={\r\n                  (isAgainstComputer && !isXTurn) || board[index] !== \"\"\r\n                }\r\n              >\r\n                {board[index]}\r\n              </SquareBtn>\r\n            );\r\n          })}\r\n        </Row>\r\n      ))}\r\n    </BoardContainer>\r\n  );\r\n};\r\n","import styled from \"styled-components\";\r\n\r\nexport const TicTacToeContainer = styled.div`\r\n  display: flex;\r\n  flex-direction: column;\r\n  align-items: center;\r\n\r\n  padding: 24px;\r\n\r\n  text-align: center;\r\n  background-color: ${(p) => p.theme.colors.componentBgc};\r\n`;\r\n\r\nexport const StyledTitle = styled.h2`\r\n  font-size: 24px;\r\n  font-weight: 600;\r\n\r\n  color: rgb(170, 200, 85);\r\n`;\r\n\r\nexport const StyledDescription = styled.p`\r\n  width: 300px;\r\n  margin-top: 12px;\r\n  font-size: 16px;\r\n  color: rgb(200, 200, 60);\r\n`;\r\n\r\nexport const SwitcherButton = styled.button`\r\n  margin-top: 12px;\r\n  padding: 12px;\r\n\r\n  border-radius: 6px;\r\n  border-color: transparent;\r\n\r\n  background-color: rgba(7, 14, 7, 0.75);\r\n  color: rgb(200, 200, 60);\r\n\r\n  font-size: 16px;\r\n  font-weight: 600;\r\n`;\r\n\r\nexport const StyledScore = styled.p`\r\n  margin-top: 12px;\r\n  font-size: 24px;\r\n  color: rgb(200, 200, 60);\r\n`;\r\n\r\nexport const StyledButton = styled.button`\r\n  margin-top: 12px;\r\n  padding: 12px;\r\n\r\n  border-radius: 6px;\r\n  border-color: transparent;\r\n  background-color: rgba(7, 14, 7, 0.75);\r\n\r\n  font-size: 24px;\r\n  font-weight: 400;\r\n  color: rgb(170, 200, 85);\r\n`;\r\n","import { useEffect, useState, useMemo, useCallback } from \"react\";\r\nimport { Board } from \"./Board/Board\";\r\n\r\nimport {\r\n  TicTacToeContainer,\r\n  StyledTitle,\r\n  StyledDescription,\r\n  StyledScore,\r\n  SwitcherButton,\r\n  StyledButton,\r\n} from \"./TicTacToe.styled\";\r\n\r\nexport const TicTacToe = () => {\r\n  const initialBoard = Array(9).fill(\"\");\r\n\r\n  const [board, setBoard] = useState(initialBoard);\r\n  const [isXTurn, setIsXTurn] = useState(true);\r\n  const [status, setStatus] = useState(\"\");\r\n  const [isAgainstComputer, setIsAgainstComputer] = useState(false);\r\n  const [errorMessage, setErrorMessage] = useState(\"\");\r\n\r\n  // Input: squares - an array representing the current state of the game board\r\n  // Output: The symbol ('X' or 'O') of the winner if there is one, otherwise null\r\n  const getWinner = useMemo(() => {\r\n    // Winning combinations 0-1-2 a-b-c\r\n    const winningCombinations = [\r\n      [0, 1, 2],\r\n      [3, 4, 5],\r\n      [6, 7, 8],\r\n      [0, 3, 6],\r\n      [1, 4, 7],\r\n      [2, 5, 8],\r\n      [0, 4, 8],\r\n      [2, 4, 6],\r\n    ];\r\n\r\n    // Iterate through each winning combination to check for a winner\r\n    return (squares) => {\r\n      for (let i = 0; i < winningCombinations.length; i++) {\r\n        const [a, b, c] = winningCombinations[i];\r\n\r\n        // Check if the squares in the winning combination are all the same symbol\r\n        if (\r\n          squares[a] &&\r\n          squares[a] === squares[b] &&\r\n          squares[a] === squares[c]\r\n        ) {\r\n          return squares[a]; // Return the winning symbol\r\n        }\r\n      }\r\n\r\n      return null; // No winner found\r\n    };\r\n  }, []);\r\n\r\n  // Handle click on a square\r\n  const handleClick = useCallback(\r\n    (index) => {\r\n      try {\r\n        // Check if the index is within the valid range\r\n        if (index < 0 || index >= board.length) {\r\n          throw new Error(`Invalid index: ${index}`);\r\n        }\r\n\r\n        // Check if the game has already been won or the square is already occupied\r\n        if (getWinner(board) || board[index]) {\r\n          throw new Error(`Invalid move: ${index}`);\r\n        }\r\n\r\n        // Update the board state and player turn\r\n        setBoard((prevBoard) => {\r\n          const newBoard = [...prevBoard];\r\n          newBoard[index] = isXTurn ? \"X\" : \"O\";\r\n          return newBoard;\r\n        });\r\n        setIsXTurn(!isXTurn);\r\n      } catch (error) {\r\n        // Handle the error\r\n        setErrorMessage(error.message);\r\n        console.error(\"An error occurred:\", error.message);\r\n      }\r\n    },\r\n    [board, isXTurn, getWinner]\r\n  );\r\n\r\n  const handleRestart = () => {\r\n    setBoard(initialBoard);\r\n    setIsXTurn(true);\r\n  };\r\n\r\n  // Switcher\r\n  const handleSwitchMode = () => {\r\n    setIsAgainstComputer((prev) => !prev);\r\n    setBoard(initialBoard);\r\n    setIsXTurn(true);\r\n    setStatus(\"\");\r\n    setErrorMessage(\"\");\r\n  };\r\n\r\n  const makeComputerMove = useCallback(() => {\r\n    const emptyIndexes = board.reduce(\r\n      (indexes, value, index) => (value === \"\" ? [...indexes, index] : indexes),\r\n      []\r\n    );\r\n    const randomIndex =\r\n      emptyIndexes[Math.floor(Math.random() * emptyIndexes.length)];\r\n\r\n    setTimeout(() => handleClick(randomIndex), 500);\r\n  }, [board, handleClick]);\r\n\r\n  useEffect(() => {\r\n    const winner = getWinner(board);\r\n    if (winner) {\r\n      setStatus(`\"${winner}\" переміг!`);\r\n    } else if (board.every((item) => item !== \"\")) {\r\n      setStatus(\"Нічия! Почніть нову гру.\");\r\n    } else {\r\n      if (isAgainstComputer && !isXTurn) {\r\n        makeComputerMove();\r\n      }\r\n      setStatus(`Зараз хід: ${isXTurn ? \"X\" : \"O\"}`);\r\n    }\r\n  }, [board, isXTurn, getWinner, isAgainstComputer, makeComputerMove]);\r\n\r\n  return (\r\n    <TicTacToeContainer>\r\n      <StyledTitle>Хрестики-нулики</StyledTitle>\r\n\r\n      <StyledDescription>\r\n        *Ви можете виграти, поставивши три однакових знаки (\"Х\" або \"О\") в\r\n        горизонтальному, вертикальному чи діагональному ряду.\r\n      </StyledDescription>\r\n      <SwitcherButton onClick={handleSwitchMode}>\r\n        {isAgainstComputer ? \"Грати з другом\" : \"Грати з комп'ютером\"}\r\n      </SwitcherButton>\r\n      <StyledScore>{status}</StyledScore>\r\n      <Board\r\n        board={board}\r\n        handleClick={handleClick}\r\n        isXTurn={isXTurn}\r\n        isAgainstComputer={isAgainstComputer}\r\n      />\r\n      <StyledButton onClick={handleRestart}>Нова гра</StyledButton>\r\n    </TicTacToeContainer>\r\n  );\r\n};\r\n","import styled from \"styled-components\";\r\n\r\nexport const PageContainer = styled.div`\r\n  display: flex;\r\n  align-items: center;\r\n  justify-content: center;\r\n\r\n  padding: 12px;\r\n  \r\n  @media screen and (min-width: 576px) {\r\n    padding: 24px;\r\n  }\r\n\r\n`;\r\n","import { TicTacToe } from \"../../components/TicTacToe/TicTacToe\";\r\nimport { PageContainer } from \"./TicTacToePage.styled\";\r\n\r\nconst TicTacToePage = () => {\r\n  return (\r\n    <PageContainer>\r\n      <TicTacToe />\r\n    </PageContainer>\r\n  );\r\n};\r\n\r\nexport default TicTacToePage;\r\n"],"names":["BoardContainer","styled","div","_templateObject","_taggedTemplateLiteral","Row","_templateObject2","SquareBtn","button","_templateObject3","p","theme","colors","bgcPrimary","Board","_ref","board","handleClick","isXTurn","isAgainstComputer","_jsx","children","map","rowIndex","colIndex","index","onClick","disabled","TicTacToeContainer","componentBgc","StyledTitle","h2","StyledDescription","SwitcherButton","_templateObject4","StyledScore","_templateObject5","StyledButton","_templateObject6","TicTacToe","initialBoard","Array","fill","setBoard","useState","setIsXTurn","status","setStatus","setIsAgainstComputer","errorMessage","setErrorMessage","getWinner","useMemo","winningCombinations","squares","i","length","a","b","c","useCallback","Error","concat","prevBoard","newBoard","error","message","console","makeComputerMove","emptyIndexes","reduce","indexes","value","randomIndex","Math","floor","random","setTimeout","useEffect","winner","every","item","_jsxs","handleSwitchMode","prev","handleRestart","PageContainer","TicTacToePage"],"sourceRoot":""}